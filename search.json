[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 GreatLakesFW authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/analyse_uncertainty.html","id":"study-system","dir":"Articles","previous_headings":"","what":"Study System","title":"Interaction and uncertainty","text":"consider one system 5 species consists two linear chains one top predator linking two. dynamics system.","code":"library(fwebinfr) library(ggplot2) library(ggraph) library(patchwork) library(tidygraph) library(tidyr) net <- fw_example_5species_2chains() net ## $A ##      [,1] [,2] [,3] [,4] [,5] ## [1,]   -1    0   -1    0    0 ## [2,]    0   -1    0   -1    0 ## [3,]    1    0    0    0   -1 ## [4,]    0    1    0    0   -1 ## [5,]    0    0    1    1    0 ##  ## $B ## [1] 10000  1000   200   100    20 ##  ## $R ## [1]   500   100  -500  -100 -1000 ##  ## $U ##    row col unknown value  name ## 1    1   1    TRUE    -1 a_1_1 ## 2    3   1    TRUE     1 a_3_1 ## 3    2   2    TRUE    -1 a_2_2 ## 4    4   2    TRUE     1 a_4_2 ## 5    1   3    TRUE    -1 a_1_3 ## 6    5   3    TRUE     1 a_5_3 ## 7    2   4    TRUE    -1 a_2_4 ## 8    5   4    TRUE     1 a_5_4 ## 9    3   5    TRUE    -1 a_3_5 ## 10   4   5    TRUE    -1 a_4_5 ##  ## $sdB ## NULL ##  ## $model ## function (t, y, pars)  ## { ##     return(list((pars$A %*% y + pars$R) * y)) ## } ## <bytecode: 0x561950b6ea48> ## <environment: namespace:fwebinfr> ##  ## attr(,\"class\") ## [1] \"fw_problem\" ## Using \"tree\" as default layout"},{"path":"/articles/analyse_uncertainty.html","id":"basic-inference","dir":"Articles","previous_headings":"","what":"Basic inference","title":"Interaction and uncertainty","text":"Now, call fw_infer() predict interaction strengths. Let’s visualize range interaction strength stability.   can plot dynamics least stable systems.","code":"res <- net |> fw_infer() ## Warning in lsei(E = E, F = F, G = G, H = H): No equalities - setting type = 2 head(res$prediction) ##         a_1_1      a_3_1      a_2_2     a_4_2      a_1_3     a_5_3     a_2_4 ## 1 0.048841634 0.05791831 0.08583662 0.1416338 0.05791831 3.9591553 0.1416338 ## 2 0.001444207 0.62064003 0.06412953 0.3566577 2.42778966 1.3541516 0.3587047 ## 3 0.010520594 0.34932731 0.03826696 0.4697553 1.97397028 1.5340412 0.6173304 ## 4 0.007669695 0.46459334 0.05780077 0.3757557 2.11651526 1.1434280 0.4219923 ## 5 0.011821589 0.69398904 0.04785023 0.4410869 1.90892053 1.9397128 0.5214977 ## 6 0.015781313 0.64624097 0.03254650 0.3079886 1.71093434 0.5958955 0.6745350 ##      a_5_4      a_3_5     a_4_5 leading_ev ## 1 2.081689   3.959155  2.081689  -4.819539 ## 2 7.291697 285.320017 12.832883  -4.638453 ## 3 6.931918 149.663654 18.487765 -23.688365 ## 4 7.713144 207.296670 13.787785 -15.378358 ## 5 6.120574 321.994521 17.054347 -29.064702 ## 6 8.808209 298.120484 10.399432 -20.767728 fw_range_plot(res) fw_range_compare_plot(res, show_lev = FALSE) net_most_stable <- fw_model(   A = fw_predict_A(res, which.min(res$prediction$leading_ev)),   B = fw_predict_B(res, which.min(res$prediction$leading_ev)),   R = net$R ) net_least_stable <- fw_model(   A = fw_predict_A(res, which.max(res$prediction$leading_ev)),   B = fw_predict_B(res, which.max(res$prediction$leading_ev)),   R = net$R )  p1 <- fw_ode_plot(net_most_stable, net$B/1.5, seq(0, 2, 0.0001)) +   ggtitle(\"Minimum leading eigen value (most stable)\")  p2 <- fw_ode_plot(net_least_stable, net$B/1.5, seq(0, 2, 0.0001)) +   ggtitle(\"Maximum leading eigen value (least stable)\") p1 / p2"},{"path":"/articles/analyse_uncertainty.html","id":"narrowing-down-uncertainty","dir":"Articles","previous_headings":"","what":"Narrowing down uncertainty","title":"Interaction and uncertainty","text":"Let’s fix [5, 3] mean sampled values observed new range parameters values.  Let’s changes time [3, 1]  Combining two:","code":"## Warning in lsei(E = E, F = F, G = G, H = H): No equalities - setting type = 2 ## Warning in lsei(E = E, F = F, G = G, H = H): No equalities - setting type = 2 ## Warning in lsei(E = E, F = F, G = G, H = H): No equalities - setting type = 2"},{"path":"/articles/analyse_uncertainty.html","id":"imcreasing-one-interaction-strenght","dir":"Articles","previous_headings":"","what":"Imcreasing one interaction strenght","title":"Interaction and uncertainty","text":"increase [3, 1] 0.1 2.5.   Now increase [5, 3] 0.1 4.9.   Now increase [3, 1] 0.1 2.5.","code":"## Warning in scale_y_continuous(trans = \"log10\"): log-10 ## transformation introduced infinite values. ## Warning: Removed 3000 rows containing non-finite outside the scale range ## (`stat_boxplot()`)."},{"path":"/articles/get_started.html","id":"basic-2-species-system","dir":"Articles","previous_headings":"","what":"Basic 2 species system","title":"Get started with fwebinfr","text":"built-example 2 species. First, load package. example available package called using fw_example_2species(). object class fw_model includes details needed inference. sake example, matrix contains real interaction, default, none used inference interpreted unkown according atrix U. quick visualisation dynamics.","code":"library(fwebinfr) library(ggplot2) library(patchwork) # a first example net <- fw_example_2species() net ## $A ##      [,1] [,2] ## [1,] -0.1 -0.2 ## [2,]  0.1  0.0 ##  ## $B ## [1] 0.50 0.25 ##  ## $R ## [1]  0.10 -0.05 ##  ## $model ## function (t, y, pars)  ## { ##     return(list((pars$A %*% y + pars$R) * y)) ## } ## <bytecode: 0x559ed3d51d50> ## <environment: namespace:fwebinfr> ##  ## $leading_ev ## [1] -0.025 ##  ## attr(,\"class\") ## [1] \"fw_model\" fw_ode_plot(net, rep(0.3, 2), seq(1, 500, 0.1))"},{"path":"/articles/get_started.html","id":"infering-interaction-strengths","dir":"Articles","previous_headings":"","what":"Infering interaction strengths","title":"Get started with fwebinfr","text":"now call fw_infer() requires object class fw_problem obtain calling fw_as_problem(). Note can also use extra parameters limSolve::xsample() called ultimately. , burninlength = 5000, iter type actually parameters passed limSolve::xsample(). output object class fw_predicted list two elements: 1. prediction data frame prediction, 2. problem orignal problem. functions quickly eplore result. range interaction strengths can used visualize fw_range_plot().  function also allows one see individual points colored according stability.  also option compare stable set parameters rest value. default, compares 25% stable systems rest systems.  result, can check food web predicted: well biomass (equal one provided).","code":"res <- fw_infer(fw_as_problem(net)) ## Warning in lsei(E = E, F = F, G = G, H = H): No equalities - setting type = 2 class(res) ## [1] \"fw_predicted\" dim(res$prediction) ## [1] 3000    4 head(res$prediction) ##       a_1_1 a_2_1    a_1_2  leading_ev ## 1 1.0000000     1 1.000000 -0.02500000 ## 2 0.7199913     1 1.280009 -0.01799978 ## 3 0.6689279     1 1.331072 -0.01672320 ## 4 0.8436194     1 1.156381 -0.02109049 ## 5 0.8447336     1 1.155266 -0.02111834 ## 6 0.7204231     1 1.279577 -0.01801058 res <- fw_infer(fw_as_problem(net), burninlength = 5000, iter = 5000, type = \"mirror\") ## Warning in lsei(E = E, F = F, G = G, H = H): No equalities - setting type = 2 class(res) ## [1] \"fw_predicted\" dim(res$prediction) ## [1] 5000    4 head(res$prediction) ##       a_1_1 a_2_1    a_1_2  leading_ev ## 1 1.0000000     1 1.000000 -0.02500000 ## 2 0.7985890     1 1.201411 -0.01996472 ## 3 0.7522415     1 1.247758 -0.01880604 ## 4 0.4226266     1 1.577373 -0.01056567 ## 5 0.6762447     1 1.323755 -0.01690612 ## 6 0.4962632     1 1.503737 -0.01240658 fw_range_plot(res) fw_range_plot(res, show_points = TRUE) fw_range_compare_plot(res) fw_predict_A(res, 1) ##      [,1] [,2] ## [1,] -0.1 -0.2 ## [2,]  0.1  0.0 fw_predict_A(res, 1000) ##              [,1]       [,2] ## [1,] -0.006261394 -0.3874772 ## [2,]  0.100000000  0.0000000 fw_predict_B(res, 1) ## [1] 0.50 0.25 fw_predict_B(res, 1000) ## [1] 0.50 0.25"},{"path":"/articles/get_started.html","id":"compare-most-and-least-stable-systems","dir":"Articles","previous_headings":"Infering interaction strengths","what":"Compare most and least stable systems","title":"Get started with fwebinfr","text":"Let’s plot dynamics system min max leading eigen value.","code":"# we create one new `fw_problem` object with the most stable system and another one # with the the leas stable system.   net_most_stable <- fw_model(   A = fw_predict_A(res, which.min(res$prediction$leading_ev)),   B = fw_predict_B(res, which.min(res$prediction$leading_ev)),   R = net$R ) net_least_stable <- fw_model(     A = fw_predict_A(res, which.max(res$prediction$leading_ev)),     B = fw_predict_B(res, which.max(res$prediction$leading_ev)),     R = net$R )  p1 <- fw_ode_plot(net_most_stable, rep(0.3, 2), seq(1, 500, 0.1)) +    ggtitle(\"Minimum leading eigen value (most stable)\") p2 <- fw_ode_plot(net_least_stable, rep(0.3, 2), seq(1, 500, 0.1)) +   ggtitle(\"Maximum leading eigen value (least stable)\") p1 / p2"},{"path":"/articles/get_started.html","id":"working-with-known-interactions","dir":"Articles","previous_headings":"Infering interaction strengths","what":"Working with known interactions","title":"Get started with fwebinfr","text":"example , non-null interactions regarded unknown fw_model object passed fw_problem. cases, part interaction may known. specify interactions known, define U. instance let’s assume [1,1] known equals -0.1. mentioned warning, one solution , one solution started .","code":"# use the U matrix U <- res$problem$U # set the first interaction to known U$unknown[1] <- FALSE  res2 <- fw_problem(A = net$A, B = net$B, R = net$R, U) |>    fw_infer() ## Warning in (function (A = NULL, B = NULL, E = NULL, F = NULL, G = NULL, : the ## problem has a single solution; this solution is returned as function value res2 ## $prediction ##   a_2_1 a_1_2 leading_ev ## 1     1     1     -0.025 ##  ## $problem ## $A ##      [,1] [,2] ## [1,] -0.1 -0.2 ## [2,]  0.1  0.0 ##  ## $B ## [1] 0.50 0.25 ##  ## $R ## [1]  0.10 -0.05 ##  ## $U ##    name row col unknown value ## 1 a_2_1   2   1    TRUE   0.1 ## 2 a_1_2   1   2    TRUE  -0.2 ## 3 a_1_1   1   1   FALSE  -0.1 ##  ## $sdB ## NULL ##  ## $model ## function (t, y, pars)  ## { ##     return(list((pars$A %*% y + pars$R) * y)) ## } ## <bytecode: 0x559ed3d51d50> ## <environment: namespace:fwebinfr> ##  ## attr(,\"class\") ## [1] \"fw_problem\" ##  ## attr(,\"class\") ## [1] \"fw_predicted\" uniq_sys <- fw_model(   A = fw_predict_A(res2, 1),   B = fw_predict_B(res2, 1),   R = net$R ) fw_ode_plot(uniq_sys, rep(0.3, 2), seq(1, 500, 0.1)) +    ggtitle(\"Unique solution\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Cazelles. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cazelles K (2024). fwebinfr: Infer Food Webs Interactions. R package version 0.0.2.","code":"@Manual{,   title = {fwebinfr: Infer Food Webs Interactions},   author = {Kevin Cazelles},   year = {2024},   note = {R package version 0.0.2}, }"},{"path":"/index.html","id":"fwebinfr","dir":"","previous_headings":"","what":"Infer Food Webs Interactions","title":"Infer Food Webs Interactions","text":"Food web inference using LIM.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Infer Food Webs Interactions","text":"Requires R>=4.2 {R} install.packages(\"remotes\") remotes::install_deps()","code":""},{"path":"/index.html","id":"how-to","dir":"","previous_headings":"","what":"How to","title":"Infer Food Webs Interactions","text":"Examples provided vignettes. One way obtain vignettes html documents embedded website build pkgdown website.","code":"install.packages(\"pkgdown\") pkgdown::build_site()"},{"path":"/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Infer Food Webs Interactions","text":"Citation: GLFC (Great Lakes Fishery Commission). 2022. Commercial fish production Great Lakes 1867–2020 [online database]. Great Lakes Fishery Commission, Ann Arbor, Michigan. Available: www.glfc.org/great-lakes-databases.php.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Infer Food Webs Interactions","text":"Gellner G, McCann K, Hastings . 2023. Stable diverse food webs become common interactions biologically constrained. Proceedings National Academy Sciences 120:e2212061120. DOI: 10.1073/pnas.2212061120.","code":""},{"path":"/reference/fw_example_2species.html","id":null,"dir":"Reference","previous_headings":"","what":"Study case — fw_example_2species","title":"Study case — fw_example_2species","text":"Helper function includes study cases.","code":""},{"path":"/reference/fw_example_2species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Study case — fw_example_2species","text":"","code":"fw_example_2species()  fw_example_5species_2chains(add_sdB = FALSE)"},{"path":"/reference/fw_example_2species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Study case — fw_example_2species","text":"add_sdB logical. biomass variation added?","code":""},{"path":"/reference/fw_example_2species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study case — fw_example_2species","text":"","code":"fw_example_2species() #> $A #>      [,1] [,2] #> [1,] -0.1 -0.2 #> [2,]  0.1  0.0 #>  #> $B #> [1] 0.50 0.25 #>  #> $R #> [1]  0.10 -0.05 #>  #> $model #> function (t, y, pars)  #> { #>     return(list((pars$A %*% y + pars$R) * y)) #> } #> <bytecode: 0x55d8a1a71cd0> #> <environment: namespace:fwebinfr> #>  #> $leading_ev #> [1] -0.025 #>  #> attr(,\"class\") #> [1] \"fw_model\""},{"path":"/reference/fw_infer.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate interaction strengths — fw_infer","title":"Estimate interaction strengths — fw_infer","text":"Function estimate interaction strengths using LIM.","code":""},{"path":"/reference/fw_infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate interaction strengths — fw_infer","text":"","code":"fw_infer(x, eff_max = 1, ...)  fw_predict_A(y, index = 1)  fw_predict_B(y, index = 1)"},{"path":"/reference/fw_infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate interaction strengths — fw_infer","text":"x object class fw_problem. eff_max max efficiency. ... arguments passed limSolve::xsample()). y object class fw_predicted index index prediction used.","code":""},{"path":"/reference/fw_infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate interaction strengths — fw_infer","text":"Return list two elements: prediction: data frame one column per interaction strength estimated. number row given number interaction sets estimated xsample() (see parameter iter xsample()).","code":""},{"path":"/reference/fw_infer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate interaction strengths — fw_infer","text":"LIM based generalized linear Lotka-Volterra model following interaction matrix: $$\\frac{1/X}{X'} = * X + R $$ See limSolve::xsample() meaning matrices E, F, G H.","code":""},{"path":"/reference/fw_infer.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Estimate interaction strengths — fw_infer","text":"fw_predict_A(): returns predicted . fw_predict_B(): returns predicted B.","code":""},{"path":"/reference/fw_infer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate interaction strengths — fw_infer","text":"Gellner G, McCann K, Hastings . 2023. Stable diverse food webs become common interactions biologically constrained. Proceedings National Academy Sciences 120:e2212061120. DOI: 10.1073/pnas.2212061120.","code":""},{"path":"/reference/fw_infer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate interaction strengths — fw_infer","text":"","code":"A <- rbind(c(-1, -1), c(1, 0)) R <- c(0.1, -0.05) B <- c(0.5, 0.25) res <- fw_problem(A, B, R) |> fw_infer() #> Warning: No equalities - setting type = 2"},{"path":"/reference/fw_list_experim.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical experiments — fw_list_experim","title":"Numerical experiments — fw_list_experim","text":"Numerical experiments","code":""},{"path":"/reference/fw_list_experim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical experiments — fw_list_experim","text":"","code":"fw_list_experim()  run_experim01(eff_max = 1)  get_fig_exp_1(output_dir = \".\")"},{"path":"/reference/fw_list_experim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical experiments — fw_list_experim","text":"eff_max maximum transfer efficiency. output_dir output directory","code":""},{"path":"/reference/fw_list_experim.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Numerical experiments — fw_list_experim","text":"run_experim01(): First experiment get_fig_exp_1(): First experiment three different eff_max","code":""},{"path":"/reference/fw_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a foodweb model object — fw_model","title":"Create a foodweb model object — fw_model","text":"Create object class fw_model.","code":""},{"path":"/reference/fw_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a foodweb model object — fw_model","text":"","code":"fw_model(A, B, R)  fw_get_model(model = c(\"lv_fr1\"))"},{"path":"/reference/fw_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a foodweb model object — fw_model","text":"interaction matrix. square matrix describing interactions system (see details). B biomass vector. R reproduction/mortality vector. model model used.","code":""},{"path":"/reference/fw_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a foodweb model object — fw_model","text":"object class fw_problem named list 4 elements: : interaction matrix B: biomass vector R: mortality rate vector model: underlying model","code":""},{"path":"/reference/fw_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a foodweb model object — fw_model","text":"far one model supported, general Lotka-Volterra linear response.","code":""},{"path":"/reference/fw_model.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a foodweb model object — fw_model","text":"fw_get_model(): get model","code":""},{"path":"/reference/fw_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a foodweb model object — fw_model","text":"","code":"A <- rbind(c(-1, -1), c(1, 0)) R <- c(0.1, -0.05) B <- c(0.5, 0.25) fw_model(A, B, R) #> $A #>      [,1] [,2] #> [1,]   -1   -1 #> [2,]    1    0 #>  #> $B #> [1] 0.50 0.25 #>  #> $R #> [1]  0.10 -0.05 #>  #> $model #> function (t, y, pars)  #> { #>     return(list((pars$A %*% y + pars$R) * y)) #> } #> <bytecode: 0x55d8a1a71cd0> #> <environment: namespace:fwebinfr> #>  #> $leading_ev #> [1] 0.367635 #>  #> attr(,\"class\") #> [1] \"fw_model\""},{"path":"/reference/fw_niche_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to generate structured model foodwebs — fw_niche_model","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"function implementation niche model (Williams & Martinez, 2000) generates food webs based three elements: number species, niche axis value connectance.","code":""},{"path":"/reference/fw_niche_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"","code":"fw_niche_model(   nsp,   connectance,   connect_all = FALSE,   unbias = FALSE,   niche = NULL )"},{"path":"/reference/fw_niche_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"nsp integer giving number species considered. connectance real positive 0 .5 indicating connectance network generated. connect_all Logical. TRUE, species network least one prey (niche lowest niche value). unbias Logical. TRUE, first species may basal species. niche vector real positive 0 1 standing niche axis. Default set NULL, case niche axis automatically generated.","code":""},{"path":"/reference/fw_niche_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"logical matrix describing pairwise interactions. given line describes diet given species column describes set predator associated particular species.","code":""},{"path":"/reference/fw_niche_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"Three remarks. First, according Williams Martinez (2000), species lowest niche value considered basal species therefore feed upon another species. introduces slight bias (e.g expected connectance lower expected values connectance). Second, forcing species connected introduces another bias (connectance values) tends connected expected. Third, custom niche axes, expected connectance may one expected (connectance) niche values distribution likely differs uniform distribution used Williams Martinez (2000).","code":""},{"path":"/reference/fw_niche_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"Williams, R.J. Martinez, N.D. (2000) Simple rules yield complex food webs. Nature, 404:180–183.","code":""},{"path":"/reference/fw_niche_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to generate structured model foodwebs — fw_niche_model","text":"","code":"fw_niche_model(10, 0.2) #>        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] #>  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #>  [2,] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #>  [3,]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #>  [4,] FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE #>  [5,] FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #>  [6,] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE #>  [7,]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #>  [8,] FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE #>  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE #> [10,] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE"},{"path":"/reference/fw_ode_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple ODE plot — fw_ode_plot","title":"Simple ODE plot — fw_ode_plot","text":"Simple ODE plot","code":""},{"path":"/reference/fw_ode_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple ODE plot — fw_ode_plot","text":"","code":"fw_ode_plot(x, init, times)  fw_range_plot(y, show_points = FALSE, show_lev = TRUE)  fw_range_compare_plot(y, prob = 0.25, show_lev = TRUE)"},{"path":"/reference/fw_ode_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple ODE plot — fw_ode_plot","text":"x object class fw_model. init initial values (see deSolve::ode()). times time steps (see deSolve::ode()). y object class fw_predict. show_points logical. points added top box. Note points colored according value leading eigen vector. show_lev logical. distribution eigen values included? prob quantile used split parameters sets.","code":""},{"path":"/reference/fw_ode_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple ODE plot — fw_ode_plot","text":"","code":"fw_ode_plot(fw_example_2species(), rep(0.3, 2), seq(1, 500, 0.1))"},{"path":"/reference/fw_problem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Foodweb model object — fw_problem","title":"Create Foodweb model object — fw_problem","text":"Create object class fw_problem can used interaction inference.","code":""},{"path":"/reference/fw_problem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Foodweb model object — fw_problem","text":"","code":"fw_problem(A, B, R, U = NULL, sdB = NULL)  fw_as_problem(x, ...)"},{"path":"/reference/fw_problem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Foodweb model object — fw_problem","text":"interaction matrix. square matrix describing interactions system (see details). NULL, derived U. B biomass vector. R reproduction/mortality vector. U unknown interactions. data frame includes position unknown/known interactions. NULL, U derived . sdB vector standard deviation biomass (see limSolve::xsample()). x R object. ... extra arguments (ignored far, might use custom xsample point).","code":""},{"path":"/reference/fw_problem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Foodweb model object — fw_problem","text":"object class fw_problem named list 7 elements: : interaction matrix B: biomass vector R: mortality rate vector U: unknown interaction(s) SdB: biomass variation model: underlying model","code":""},{"path":"/reference/fw_problem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Foodweb model object — fw_problem","text":"cases, needs defined include: 1 interactions present positive, -1 interactions present negative, 0 otherwise. U generated according values. may however includes known interactions, case, U needs defined must includes known interactions (unknown interactions identified using ). also possible declare U, case dimension coefficients derived U. U strict format, namely data frame 5 columns: name: interaction name, U created name a_i_j row number j column number, row: row number, col: column number, unknown: logical vector identifies unknown known interactions, value: interaction value, sign matter unknown interactions, order matter columns ordered validation step.","code":""},{"path":"/reference/fw_problem.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Foodweb model object — fw_problem","text":"fw_as_problem(): Coerce object object class fw_problem.","code":""},{"path":"/reference/fw_problem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Foodweb model object — fw_problem","text":"","code":"A <- rbind(c(-1, -1), c(1, 0)) R <- c(0.1, -0.05) B <- c(0.5, 0.25) fw_problem(A, B, R) #> $A #>      [,1] [,2] #> [1,]   -1   -1 #> [2,]    1    0 #>  #> $B #> [1] 0.50 0.25 #>  #> $R #> [1]  0.10 -0.05 #>  #> $U #>   row col unknown value  name #> 1   1   1    TRUE    -1 a_1_1 #> 2   2   1    TRUE     1 a_2_1 #> 3   1   2    TRUE    -1 a_1_2 #>  #> $sdB #> NULL #>  #> $model #> function (t, y, pars)  #> { #>     return(list((pars$A %*% y + pars$R) * y)) #> } #> <bytecode: 0x55d8a1a71cd0> #> <environment: namespace:fwebinfr> #>  #> attr(,\"class\") #> [1] \"fw_problem\""},{"path":"/reference/webFromNicheModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Core implementation of the niche model. — webFromNicheModel","title":"Core implementation of the niche model. — webFromNicheModel","text":"Core implementation niche model.","code":""},{"path":"/reference/webFromNicheModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core implementation of the niche model. — webFromNicheModel","text":"","code":"webFromNicheModel(nsp, connec, niche, connect_all = FALSE, unbias = FALSE)"},{"path":"/reference/webFromNicheModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core implementation of the niche model. — webFromNicheModel","text":"nsp integer giving number species considered. connec real positive 0 .5 indicating connectance network generated. niche vector real positive 0 1 standing niche axis. Default set NULL, case niche axis automatically generated. connect_all Logical. TRUE, species network least one prey (niche lowest niche value). unbias Logical. TRUE, first species may basal species.","code":""},{"path":"/news/index.html","id":"fwebinfr-002","dir":"Changelog","previous_headings":"","what":"fwebinfr 0.0.2","title":"fwebinfr 0.0.2","text":"fw_infer() handles known interactions. Add fw_range_plot() fw_range_compare_plot() plot interaction strengths stability ranges. Add fw_ode_plot() visualize ODE integration. Add implementation niche model (see fw_niche_model()). Add fw_problem() create objects class fw_problem. Add fw_model() create fw_model objects (one model currently available). Export fw_predict_A() fw_predict_B(). Add vignettes “Get started fwebinfr” “Interaction uncertainty”. fw_infer() gains arguments sdB dealt biomass variation ... pass argument limSolve::xsample().","code":""},{"path":"/news/index.html","id":"fwebinfr-001","dir":"Changelog","previous_headings":"","what":"fwebinfr 0.0.1","title":"fwebinfr 0.0.1","text":"fw_infer() performs LIM system described generalized Lotka-Voltera equation set. fw_gener() generates parameter values. fw_list_experim() list available numerical experiments.","code":""}]
